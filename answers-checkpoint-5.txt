Submit your answers to the following questions.
NOTE: Real-world examples must be your own and not based on the text or previous assignments.

	1. How do you find related data held in two separate data tables?
  A: using the JOIN method. 

	2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.
  A: INNER JOIN: produces in the results table one row for each common row amongst the tables being queried. Example: a table of all employees that are currently assigned to any project. 
  LEFT OUTER JOIN: produces in the results table each row from the first table, and each matching row from the second table. Example: a table of all employees, whether assigned to a project or not. 
  RIGHT OUTER JOIN: produces in the result table each row from the second table, and each matching row from the first table. Example: a table of all projects, regardless of whether any employee is currently assigned to them or not. 

	3. Define primary key and foreign key. Give a real-world example for each.
  A: primary key: a unique identifier for each row in a database table. Example: in the projects table, the id key. 
  Foreign key: the primary key of one table that is included as non-unique attribute in another table. Example: in the employee table, the project_id key. 

	4. Define aliasing.
  The technique of creating short variable names, usually a single letter, to replace the table name in a query. 

	5. Change this query so that you are using aliasing:

SELECT professor.name, compensation.salary,
compensation.vacation_days FROM professor JOIN
compensation ON professor.id =
compensation.professor_id;

A:

SELECT p.name, c.salary, c.vacation_days 
  FROM professor AS p 
  JOIN compensation AS c 
  ON p.id = c.professor_id;

	6. Why would you use a NATURAL JOIN? Give a real-world example.
  A: USING takes a comma-separated list of shared column names in order to execute a JOIN statement. We can use NATURAL as a shorthand for USING. NATURAL forms a USING list 
  consisting of only the column *names* that appear in both input tables. 

	7. Using this Employee schema and data, write queries to find the following information: https://www.db-fiddle.com/f/sG1TKgR15GhH8cjbAwzjAm/0
		○ List all employees and all shifts.

    SELECT e.name, ss.shift_id
    FROM employees AS e
    JOIN scheduled_shifts AS ss
    ON e.id = ss.employee_id;

	8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results: https://www.db-fiddle.com/f/tpodLv3A43VL4gHqohqx2o/0
		○ Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

    SELECT v.first_name, v.last_name, d.name
    FROM volunteers AS v
    LEFT OUTER JOIN dogs AS d
    ON v.foster_dog_id = d.id;

| first_name | last_name  | name      |
| ---------- | ---------- | --------- |
| Rubeus     | Hagrid     | Munchkin  |
| Marjorie   | Dursley    | Marmaduke |
| Sirius     | Black      |           |
| Remus      | Lupin      |           |
| Albus      | Dumbledore |           |


		○ The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

    SELECT c.name, a.first_name, a.last_name, ca.date
    FROM cats AS c
    JOIN cat_adoptions AS ca 
    ON c.id = ca.cat_id
    JOIN adopters AS a 
    ON ca.adopter_id = a.id
    WHERE ca.date >= (CURRENT_DATE - 30);

| name     | first_name | last_name | date                     |
| -------- | ---------- | --------- | ------------------------ |
| Mushi    | Arabella   | Figg      | 2019-05-15T00:00:00.000Z |
| Victoire | Argus      | Filch     | 2019-05-20T00:00:00.000Z |

  -- for my own notes: 
  
  SELECT simply states the columns we want to display. Everything else we worry about later. 
  
  FROM is the first table we look at - depending on what we put after FROM, we decide whether (if applicable) it will be LEFT OUTER JOIN, or RIGHT OUTER JOIN. 
  
  In the  JOIN statements, we simply add the TABLES (we're not talking about columns here - that, we already specified in the SELECT statement) that we need to pull additional data from. 
  And, we say UNDER WHAT CONDITIONS we pull that additional data in -> only when it's relevant for our results. With an ON statement on an INNER JOIN for example, e.g. ON c.id = ca.cat_id, we say, 
  from the get-go, only include that data from the joined table where the cat_id value from the cat_adoptions table matches the id value from the cats table. 
  E.g., above, we want a list of CATS -> we're not interested in ALL data from the cat_adoptions table, i.e., all cat adoptions that have ever taken place (because, that's what that table is about - cat *adoptions*)
  - ONLY that data, those records, i.e. those rows, that have a matching cat_id. 
  
  Once we've joined the first table, we can then use that first joined table also in a second JOIN statement. And again, from the second joined table, we only pull in data that matches our conditions. 
  And, we may add tables under JOIN statements from which we DON'T want to display any columns - see below, we might join them simply so we can use them to join a second table. 

  Then, finally, we can further limit the results by putting a WHERE statement. 

  Good example for all of that is also the following prompt:


		○ Create a list of adopters who have not yet chosen a dog to adopt.

    SELECT a.first_name, a.last_name, d.name
    FROM adopters AS a
    LEFT OUTER JOIN dog_adoptions AS da ON a.id = da.adopter_id
    LEFT OUTER JOIN dogs AS d ON d.id = da.dog_id
    WHERE da.adopter_id IS NULL;

| first_name | last_name | name |
| ---------- | --------- | ---- |
| Arabella   | Figg      |      |
| Hermione   | Granger   |      |

    
		○ Lists of all cats and all dogs who have not been adopted.

    
    SELECT c.name AS animal_name
    FROM cats AS c
    LEFT OUTER JOIN cat_adoptions AS ca
    ON c.id = ca.cat_id
    WHERE ca.cat_id IS NULL
    UNION
    SELECT d.name 
    FROM dogs AS d
    LEFT OUTER JOIN dog_adoptions AS da
    ON d.id = da.dog_id
    WHERE da.dog_id IS NULL;

    | animal_name |
    | ----------- |
    | Boujee      |
    | Lassie      |
    | Marley      |
    | Marmaduke   |
    | Munchkin    |
    | Nala        |
    | Seashell    |



		○ The name of the person who adopted Rosco.

        SELECT a.first_name, a.last_name, d.name
        FROM adopters AS a
        JOIN dog_adoptions AS da
        ON a.id = da.adopter_id
        JOIN dogs AS d
        ON da.dog_id = d.id
        WHERE d.name = 'Rosco';

    | first_name | last_name | name  |
    | ---------- | --------- | ----- |
    | Argus      | Filch     | Rosco |


	9. Using this Library schema and data, write queries applying the following scenarios and include the results: https://www.db-fiddle.com/f/j4EGoWzHWDBVtiYzB9ygC4/0

		○ To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".
    
        SELECT b.title, h.rank, p.name
        FROM patrons AS p
        JOIN holds AS h
        ON p.id = h.patron_id
        JOIN books AS b
        ON h.isbn = b.isbn
        WHERE b.title = 'Advanced Potion-Making'
        ORDER BY h.rank ASC;

    | title                  | rank | name           |
    | ---------------------- | ---- | -------------- |
    | Advanced Potion-Making | 1    | Terry Boot     |
    | Advanced Potion-Making | 2    | Cedric Diggory |

    
    
    List all of the library patrons. If they have one or more books checked out, list the books with the patrons.


      -- DB: NOTE THAT BOTH OF THESE SOLUTIONS ONLY WORK BECAUSE NO PATRON HAS CHECKED OUT MORE THAN ONE BOOK. OTHERWISE, THEY WOULD THROW AN ERROR. 

      -- THIS FIRST SOLUTION SEEMS NOT CLEAN, TOO MUCH WE DON'T NEED:

      -- SELECT DISTINCT patrons.name, 
      -- 	(SELECT out_book.title 
      -- 	FROM 
      -- 		(SELECT t.checked_in_date, t.patron_id, b.title 
      --  		FROM transactions AS t
      --   		LEFT OUTER JOIN books AS b 
      --         USING (isbn)
      -- 		WHERE t.checked_in_date IS NULL) AS out_book 
      --   	WHERE out_book.patron_id = patrons.id) 
      -- FROM transactions AS t
      -- LEFT OUTER JOIN patrons 
      -- ON t.patron_id = patrons.id 
      -- LEFT OUTER JOIN books 
      -- USING (isbn);



        SELECT p.name, 
          (SELECT out_book.title 
          FROM 
            (SELECT t.checked_in_date, t.patron_id, b.title 
            FROM transactions AS t
              LEFT OUTER JOIN books AS b 
                USING (isbn)
            WHERE t.checked_in_date IS NULL) AS out_book 
            WHERE out_book.patron_id = p.id) 
        FROM patrons AS p
        ORDER BY p.name ASC;

    | name             | title                                   |
    | ---------------- | --------------------------------------- |
    | Cedric Diggory   | Fantastic Beasts and Where to Find Them |
    | Cho Chang        |                                         |
    | Hermione Granger |                                         |
    | Padma Patil      |                                         |
    | Terry Boot       | Advanced Potion-Making                  |
